# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11HKY1TUohgM66d--ZiAJzVYDLEB0Bsgb
"""

import requests
from bs4 import BeautifulSoup
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
import spacy

if __name__ == "__main__":
    app.run(debug=True)


nlp = spacy.load("en_core_web_sm")
app = Flask(__name__)
db_path = 'news.sqlite'
app.config['SQLALCHEMY_DATABASE_URI'] = f'sqlite:///{db_path}'
db = SQLAlchemy(app)

class News(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    url = db.Column(db.String())
    title = db.Column(db.String())
    description = db.Column(db.String())
    category = db.Column(db.String())

def categorize(text):
    doc = nlp(text)
    if 'war' in [token.text for token in doc]:
        return 'war'
    elif 'crime' in [token.text for token in doc]:
        return 'crime'
    # Add more categories here...
    else:
        return 'uncategorized'

@app.route('/scrape')
def scrape():
    with open('websites.txt', 'r') as file:
        urls = [line.strip() for line in file]

    for url in urls:
        res = requests.get(url)
        soup = BeautifulSoup(res.text, 'html.parser')

        # Fetch metadata (Open Graph tags)
        og_title = soup.find('meta', property='og:title')['content'] if soup.find('meta', property='og:title') else None
        og_description = soup.find('meta', property='og:description')['content'] if soup.find('meta', property='og:description') else None

        # Categorize based on SEO tags
        category = categorize(og_title + ' ' + (og_description if og_description else ''))

        news = News(url=url, title=og_title, description=og_description, category=category)
        db.session.add(news)
    db.session.commit()

    return 'Scraping and categorizing done!'